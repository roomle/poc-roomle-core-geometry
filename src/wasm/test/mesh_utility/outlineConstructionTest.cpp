#include "mesh_utility/outlineConstruction.h"
#include "catch2/catch.hpp"
#include <cmath>
#include <iostream>
#include <vector>

TEST_CASE("2d outline construction") {
    std::vector<float> vertices3d;
    std::vector<uint32_t> triangleIndices;
    roomle::mesh::Vector3 planeNormal, planeUp;
    std::vector<float> expectedOutline;
    SECTION("triangles") {
        vertices3d = {
                -1, -1, 0, 1, -1, 0, 0, 1, 0,
                -1, 1, 0, 0, -1, 0, 1, 1, 0,
        };
        triangleIndices = {
                0, 1, 2, 3, 4, 5,
        };
        planeNormal = {0, 0, -1};
        planeUp = {0, 1, 0};
        expectedOutline = {-1, -1, -0.5, 0, -1, 1, 0, 1, 1, 1, 0.5, 0, 1, -1, 0, -1, };
    }
    SECTION("cube") {
        vertices3d = {
                0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5,
                -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5,
                -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, 0.5, -0.5, -0.5,
                -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5,
                0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5,
        };
        triangleIndices = {
                0, 2, 1, 2, 3, 1,
                4, 6, 5, 6, 7, 5,
                8, 10, 9, 10, 11,
                9, 12, 14, 13, 14,
                15, 13, 16, 18, 17,
                18, 19, 17, 20, 22,
                21, 22, 23, 21
        };
        SECTION("front") {
            planeNormal = {0, 0, -1};
            planeUp = {0, 1, 0};
            expectedOutline = {-0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, -0.5, };
        }
        SECTION("diagonal xy edge") {
            planeNormal = {1, 0, -1};
            planeUp = {0, 1, 0};
            expectedOutline = {-0.707107, 0.5, 0, 0.5, 0.707107, 0.5, 0.707107, -0.5, 0, -0.5, -0.707107, -0.5, };
        }
        SECTION("diagonal xy") {
            planeNormal = {-1, 0, 0.5};
            planeUp = {0, 1, 0};
            expectedOutline = {-0.67082, 0.5, -0.223607, 0.5, 0.223607, 0.5, 0.67082, 0.5, 0.67082, -0.5, 0.223607, -0.5, -0.223607, -0.5, -0.67082, -0.5, };
        }
        SECTION("diagonal to corner") {
            planeNormal = {1, 1, 1};
            planeUp = {0, 1, 0};
            expectedOutline = {-0.707107, 0.408248, 0, 0.816497, 0.707107, 0.408248, 0.707107, -0.408248, 0, -0.816497, -0.707107, -0.408248, };
        }
        SECTION("diagonal") {
            planeNormal = {-0.4, 0.3, -0.2};
            planeUp = {0, 1, 0};
            expectedOutline = {-0.67082, 0.290659, -0.223607, 0.788932, 0.67082, 0.539796, 0.67082, -0.290659, 0.223607, -0.788932, -0.67082, -0.539796, };
        }
    }
    SECTION("cube") {
        vertices3d = {
                0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-0.7071,0.7071,0,-0.5,0.7071,0.5,0,0.7071,0.7071,
                0.5,0.7071,0.5,0.7071,0.7071,0,0.5,0.7071,-0.5,0,0.7071,-0.7071,-0.5,0.7071,-0.5,-0.7071,0.7071,0,-1,0,
                0,-0.7071,0,0.7071,0,0,1,0.7071,0,0.7071,1,0,0,0.7071,0,-0.7071,0,0,-1,-0.7071,0,-0.7071,-1,0,0,-0.7071,
                -0.7071,0,-0.5,-0.7071,0.5,0,-0.7071,0.7071,0.5,-0.7071,0.5,0.7071,-0.7071,0,0.5,-0.7071,-0.5,0,-0.7071,
                -0.7071,-0.5,-0.7071,-0.5,-0.7071,-0.7071,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0
        };
        triangleIndices = {
                0,9,10,1,10,11,2,11,12,3,12,13,4,13,14,5,14,15,6,15,16,7,16,17,10,9,19,9,18,19,11,10,20,10,19,20,12,11,
                21,11,20,21,13,12,22,12,21,22,14,13,23,13,22,23,15,14,24,14,23,24,16,15,25,15,24,25,17,16,26,16,25,26,
                19,18,28,18,27,28,20,19,29,19,28,29,21,20,30,20,29,30,22,21,31,21,30,31,23,22,32,22,31,32,24,23,33,23,
                32,33,25,24,34,24,33,34,26,25,35,25,34,35,28,27,37,29,28,38,30,29,39,31,30,40,32,31,41,33,32,42,34,33,
                43,35,34,44,
        };
        SECTION("front") {
            planeNormal = {0, 0, -1};
            planeUp = {0, 1, 0};
            expectedOutline = {-1, 0, -0.7071, 0.7071, 0, 1, 0.7071, 0.7071, 1, 0, 0.7071, -0.7071, 0, -1, -0.7071, -0.7071, };
        }
        SECTION("diagonal") {
            planeNormal = {0.2, 0.3, 0.4};
            planeUp = {0, 1, 0};
            expectedOutline = {
                    -0.948674, 0.176164, -0.67082, 0.711783, -0.316225, 0.939543, 0.223607, 0.960919, 0.632449,
                    0.763379, 0.894427, 0.249136, 0.948674, -0.176164, 0.67082, -0.711783, 0.316225, -0.939543,
                    -0.223607, -0.960919, -0.632449, -0.763379, -0.894427, -0.249136,
            };
        }
    }
    SECTION("tube") {
        vertices3d = {
                -1.5,0,0.5,-1.8191,0.1523,0.3536,-1.9512,0.2154,0,-1.8191,0.1523,-0.3536,-1.5,0,-0.5,-1.1809,-0.1523,
                -0.3536,-1.0488,-0.2154,0,-1.1809,-0.1523,0.3536,-1.5,0,0.5,-1.2696,0.464,0.5,-1.5809,0.6317,0.3536,
                -1.7098,0.7012,0,-1.5809,0.6317,-0.3536,-1.2696,0.464,-0.5,-0.9584,0.2962,-0.3536,-0.8295,0.2267,0,
                -0.9584,0.2962,0.3536,-1.2696,0.464,0.5,-0.977,0.8891,0.5,-1.2217,1.1443,0.3536,-1.323,1.25,0,-1.2217,
                1.1443,-0.3536,-0.977,0.8891,-0.5,-0.7323,0.6339,-0.3536,-0.631,0.5282,0,-0.7323,0.6339,0.3536,-0.977,
                0.8891,0.5,-0.523,0.8891,0.5,-0.2783,1.1443,0.3536,-0.177,1.25,0,-0.2783,1.1443,-0.3536,-0.523,0.8891,
                -0.5,-0.7677,0.6339,-0.3536,-0.869,0.5282,0,-0.7677,0.6339,0.3536,-0.523,0.8891,0.5,-0.2304,0.464,0.5,
                0.0809,0.6317,0.3536,0.2098,0.7012,0,0.0809,0.6317,-0.3536,-0.2304,0.464,-0.5,-0.5416,0.2962,-0.3536,
                -0.6705,0.2267,0,-0.5416,0.2962,0.3536,-0.2304,0.464,0.5,0,0,0.5,0.3191,0.1523,0.3536,0.4512,0.2154,0,
                0.3191,0.1523,-0.3536,0,0,-0.5,-0.3191,-0.1523,-0.3536,-0.4512,-0.2154,0,-0.3191,-0.1523,0.3536,0,0,
                0.5,0.2304,-0.464,0.5,0.5416,-0.2962,0.3536,0.6705,-0.2267,0,0.5416,-0.2962,-0.3536,0.2304,-0.464,-0.5,
                -0.0809,-0.6317,-0.3536,-0.2098,-0.7012,0,-0.0809,-0.6317,0.3536,0.2304,-0.464,0.5,0.523,-0.8891,0.5,
                0.7677,-0.6339,0.3536,0.869,-0.5282,0,0.7677,-0.6339,-0.3536,0.523,-0.8891,-0.5,0.2783,-1.1443,-0.3536,
                0.177,-1.25,0,0.2783,-1.1443,0.3536,0.523,-0.8891,0.5,0.977,-0.8891,0.5,0.7323,-0.6339,0.3536,0.631,
                -0.5282,0,0.7323,-0.6339,-0.3536,0.977,-0.8891,-0.5,1.2217,-1.1443,-0.3536,1.323,-1.25,0,1.2217,
                -1.1443,0.3536,0.977,-0.8891,0.5,1.2696,-0.464,0.5,0.9584,-0.2962,0.3536,0.8295,-0.2267,0,0.9584,
                -0.2962,-0.3536,1.2696,-0.464,-0.5,1.5809,-0.6317,-0.3536,1.7098,-0.7012,0,1.5809,-0.6317,0.3536,
                1.2696,-0.464,0.5,1.5,0,0.5,1.1809,0.1523,0.3536,1.0488,0.2154,0,1.1809,0.1523,-0.3536,1.5,0,-0.5,
                1.8191,-0.1523,-0.3536,1.9512,-0.2154,0,1.8191,-0.1523,0.3536,1.5,0,0.5,
        };
        triangleIndices = {
                0,9,1,9,10,1,1,10,2,10,11,2,2,11,3,11,12,3,3,12,4,12,13,4,4,13,5,13,14,5,5,14,6,14,15,6,6,15,7,15,16,7,
                7,16,8,16,17,8,9,18,10,18,19,10,10,19,11,19,20,11,11,20,12,20,21,12,12,21,13,21,22,13,13,22,14,22,23,
                14,14,23,15,23,24,15,15,24,16,24,25,16,16,25,17,25,26,17,18,27,19,27,28,19,19,28,20,28,29,20,20,29,21,
                29,30,21,21,30,22,30,31,22,22,31,23,31,32,23,23,32,24,32,33,24,24,33,25,33,34,25,25,34,26,34,35,26,27,
                36,28,36,37,28,28,37,29,37,38,29,29,38,30,38,39,30,30,39,31,39,40,31,31,40,32,40,41,32,32,41,33,41,42,
                33,33,42,34,42,43,34,34,43,35,43,44,35,36,45,37,45,46,37,37,46,38,46,47,38,38,47,39,47,48,39,39,48,40,
                48,49,40,40,49,41,49,50,41,41,50,42,50,51,42,42,51,43,51,52,43,43,52,44,52,53,44,45,54,46,54,55,46,46,
                55,47,55,56,47,47,56,48,56,57,48,48,57,49,57,58,49,49,58,50,58,59,50,50,59,51,59,60,51,51,60,52,60,61,
                52,52,61,53,61,62,53,54,63,55,63,64,55,55,64,56,64,65,56,56,65,57,65,66,57,57,66,58,66,67,58,58,67,59,
                67,68,59,59,68,60,68,69,60,60,69,61,69,70,61,61,70,62,70,71,62,63,72,64,72,73,64,64,73,65,73,74,65,65,
                74,66,74,75,66,66,75,67,75,76,67,67,76,68,76,77,68,68,77,69,77,78,69,69,78,70,78,79,70,70,79,71,79,80,
                71,72,81,73,81,82,73,73,82,74,82,83,74,74,83,75,83,84,75,75,84,76,84,85,76,76,85,77,85,86,77,77,86,78,
                86,87,78,78,87,79,87,88,79,79,88,80,88,89,80,81,90,82,90,91,82,82,91,83,91,92,83,83,92,84,92,93,84,84,
                93,85,93,94,85,85,94,86,94,95,86,86,95,87,95,96,87,87,96,88,96,97,88,88,97,89,97,98,89,
        };
        SECTION("front") {
            planeNormal = {0, 0, 1};
            planeUp = {0, 1, 0};
            expectedOutline = {
                -1.9512, -0.2154, -1.8191, -0.1523, -1.5, 0, -1.1809, 0.1523, -1.0488, 0.2154, -0.8295, -0.2267, -0.75,
                -0.347452, -0.6705, -0.2267, -0.4512, 0.2154, -0.2098, 0.7012, 0.177, 1.25, 1.323, 1.25, 1.7098, 0.7012,
                1.9512, 0.2154, 1.8191, 0.1523, 1.5, 0, 1.1809, -0.1523, 1.0488, -0.2154, 0.8295, 0.2267, 0.75, 0.347452,
                0.6705, 0.2267, 0.4512, -0.2154, 0.2098, -0.7012, -0.177, -1.25, -1.323, -1.25, -1.7098, -0.7012,
            };
        }
        SECTION("diagonal") {
            planeNormal = {0.7983, -0.4279, 0.4238};
            planeUp = {0, 1, 0};
            expectedOutline = {
                -1.16529, 0.478921, -0.914916, 0.542764, -0.540656, 0.620816, -0.281684, 0.663918, -0.181823, 0.858117,
                0.0829951, 1.06288, 0.442812, 1.00001, 0.885172, 0.643458, 1.0536, 0.0443991, 1.16529, -0.478921,
                0.914916, -0.542764, 0.540656, -0.620816, 0.281684, -0.663918, 0.181823, -0.858117, -0.0829951,
                -1.06288, -0.442812, -1.00001, -0.885172, -0.643458, -1.0536, -0.0443991,
            };
        }
    }

    const float epsilon = 0.0001f;
    auto constructor = roomle::mesh::OutlineConstructor::fromSingleMesh(vertices3d, triangleIndices, epsilon);
    auto actualOutline = constructor.create2dOutline(planeNormal, planeUp);
//#define OUTLINE_DEBUG_OUTPUT
#ifdef OUTLINE_DEBUG_OUTPUT
    std::cout << "(" << actualOutline.size() << ") {";
    for (auto i: actualOutline)
        std::cout << i << ", ";
    std::cout << "}" << std::endl;
#endif
    REQUIRE(actualOutline.size() == expectedOutline.size());
    for (size_t i = 0; i < actualOutline.size(); ++i) {
        REQUIRE(std::fabs(actualOutline[i] - expectedOutline[i]) < epsilon);
    }
}